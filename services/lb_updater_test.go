package services

import (
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestUpdateStream(t *testing.T) {
	dirPath, err := os.MkdirTemp("", "nginx-lb-updater")
	assert.NoError(t, err)
	defer os.RemoveAll(dirPath)

	os.Setenv("CONF_FOLDER_PATH", dirPath)

	u, err := NewLBUpdater()
	assert.NoError(t, err)

	backendName := "namespace-a_myservice"
	lbPort := 9000
	lbProtocol := "tcp"
	upstreamServers := []Server{
		{
			Host: "192.168.101.2",
			Port: 5014,
		},
		{
			Host: "192.168.101.3",
			Port: 5014,
		},
	}
	proxyTimeoutSeconds := 5
	proxyConnectTimeoutSeconds := 2

	err = u.UpdateStream(backendName, lbPort, lbProtocol, upstreamServers, proxyTimeoutSeconds, proxyConnectTimeoutSeconds)
	assert.NoError(t, err)

	confData, err := os.ReadFile(filepath.Join(dirPath, backendName+".conf"))
	assert.NoError(t, err)

	expectedConf := `# generated by nginx-lb-updater, do not edit as changes can be overwritten
upstream namespace-a_myservice {
	server 192.168.101.2:5014;
	server 192.168.101.3:5014;
}

server {
	listen        9000 ;
	proxy_pass    namespace-a_myservice;
	proxy_timeout 5s;
	proxy_connect_timeout 2s;
}

`

	assert.Equal(t, expectedConf, string(confData))
}

func TestDeleteStream(t *testing.T) {
	dirPath, err := os.MkdirTemp("", "nginx-lb-updater")
	assert.NoError(t, err)
	defer os.RemoveAll(dirPath)

	os.Setenv("CONF_FOLDER_PATH", dirPath)

	backendName := "default_myservice"
	filename := filepath.Join(dirPath, backendName+".conf")
	err = os.WriteFile(filename, []byte("TEST DATA"), 0755)
	assert.NoError(t, err)

	// make sure file exists
	_, err = os.Stat(filename)
	assert.NoError(t, err)

	u, err := NewLBUpdater()
	assert.NoError(t, err)

	err = u.DeleteStream(backendName)
	assert.NoError(t, err)

	// make sure file was deleted
	_, err = os.Stat(filename)
	assert.ErrorIs(t, err, os.ErrNotExist)
}

func TestDeleteStreamNotExisting(t *testing.T) {
	dirPath, err := os.MkdirTemp("", "nginx-lb-updater")
	assert.NoError(t, err)
	defer os.RemoveAll(dirPath)

	os.Setenv("CONF_FOLDER_PATH", dirPath)

	backendName := "default_myservice"
	filename := filepath.Join(dirPath, backendName+".conf")

	// make sure file does not exist
	_, err = os.Stat(filename)
	assert.ErrorIs(t, err, os.ErrNotExist)

	u, err := NewLBUpdater()
	assert.NoError(t, err)

	err = u.DeleteStream(backendName)
	assert.NoError(t, err)
}
